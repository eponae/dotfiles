#!/usr/bin/env bash

function nobody_nogroup_write() {
  sudo chmod -R g+w ${1} && sudo chown -R 65534:65533 ${1}
}

function docker-compose-deploy() {
  PROJECT_NAME=${1}
  readVariableIfRequired "PROJECT_NAME"

  DOMAIN=${2}
  readVariableIfRequired "DOMAIN"
  export DOMAIN=${DOMAIN}

  PROJECT_FULLNAME_SEPARATOR="uuu"
  PROJECT_FULLNAME=${PROJECT_NAME}${PROJECT_FULLNAME_SEPARATOR}`git rev-parse --short HEAD`

  oldServices=`docker ps -f name=${PROJECT_NAME}${PROJECT_FULLNAME_SEPARATOR}* -q`

  docker-compose -p ${PROJECT_FULLNAME} pull
  docker-compose -p ${PROJECT_FULLNAME} up -d
  servicesCount=`docker-compose -p ${PROJECT_FULLNAME} ps -q | wc -l`

  echo "Waiting 45 seconds for containers to start..."
  timeout=`date --date="45 seconds" +%s`
  healthyCount=$(docker events --until ${timeout} -f event="health_status: healthy" -f name=${PROJECT_NAME}${PROJECT_FULLNAME_SEPARATOR} | wc -l)

  if [ "${servicesCount}" != "${healthyCount}" ]; then
    echo "Containers didn't start, reverting..."

    docker-compose -p ${PROJECT_FULLNAME} logs
    docker-compose -p ${PROJECT_FULLNAME} ps -q | xargs docker inspect --format='{{range .State.Health.Log}}{{.Output}}{{end}}'
    docker-compose -p ${PROJECT_FULLNAME} rm --force --stop -v
    return 1
  fi

  if [ ! -z "${oldServices}" ]; then
    echo Stopping old containers
    docker stop --time=180 ${oldServices}
  fi

  if [ ! -z "${oldServices}" ]; then
    echo Removing old containers
    docker rm -f -v ${oldServices}
  fi

  echo Deploy succeed!

  docker-clean
}

function docker-restart() {
  docker start `docker ps -a -q -f status=exited -f status=created 2>/dev/null` 2>/dev/null
}

function docker-clean-images() {
  imagesToClean=`docker images --filter dangling=true -q 2>/dev/null`

  if [ ! -z "${imagesToClean}" ]; then
    docker rmi ${imagesToClean} 
  fi
}

function docker-clean() {
  forceWord=force

  if [ "${#}" -eq 2 ] && [ "${2}" != "${forceWord}" ]; then
    echo Usage: dclean [name prefix] [?force]
    return
  fi

  if [ "${1}" == "${forceWord}" ] || [ "${2}" == "${forceWord}" ]; then
    exclude_containers=""
  else
    exclude_containers=`docker ps -a -q -f label=keep=true 2>/dev/null`
  fi

  if [ ! -z "${1}" ] && [ "${1}" != "${forceWord}" ]; then
    end_containers=`docker ps -a -q -f name=${1} 2>/dev/null`
  else
    end_containers=`docker ps -a -q -f status=exited -f status=created 2>/dev/null`
  fi

  if [ ! -z "${exclude_containers}" ]; then
    end_containers=`echo ${end_containers} | tr " " "\n" | grep -v "${exclude_containers}"`
  fi
  docker rm -vf ${end_containers} 2>/dev/null
  docker-clean-images
}

export DOCKER_CONTENT_TRUST=1
